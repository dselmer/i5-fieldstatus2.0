{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { NgScrollbarModule } from 'ngx-scrollbar';\nimport * as i0 from \"@angular/core\";\nexport class AppModule {}\nAppModule.ɵfac = function AppModule_Factory(t) {\n  return new (t || AppModule)();\n};\nAppModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: AppModule\n});\nAppModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  imports: [NgScrollbarModule]\n});\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(AppModule, {\n    imports: [NgScrollbarModule]\n  });\n})();\nlet FormpageComponent = class FormpageComponent {\n  constructor() {\n    this.stream = null;\n    this.trigger = new Subject();\n    // savedTriggers:Subject<void>[] = [];\n    this.previewImage = '';\n    this.savedImages = [];\n    this.btnLabel = 'Take a Pic';\n    this.camIsShowing = false;\n    this.camIsStreaming = false;\n    this.displayCamera = false;\n    this.displayDescription = false;\n    this.formContainer = false;\n    this.imageBox = true;\n    this.imageBoxVisible = true;\n    this.formInitialized = true;\n    this.reopenCameraBtn = false;\n    this.isFlash = false;\n  }\n  get $trigger() {\n    return this.trigger.asObservable();\n  }\n  snapshot(event) {\n    // console.log(event); \n    this.previewImage = event.imageAsDataUrl;\n    //save in array\n    const imageFromEvent = event.imageAsDataUrl;\n    this.savedImages.push(imageFromEvent);\n  }\n  toggleReopenCam() {\n    this.reopenCameraBtn = !this.reopenCameraBtn;\n  }\n  // create function that reads the src\n  // compares it to the l i s that\n  // removes it if there\n  removeImage(image) {\n    const indexOfImage = this.savedImages.indexOf(image);\n    if (indexOfImage != -1) {\n      this.savedImages.splice(indexOfImage, 1);\n    }\n  }\n  getPermission() {\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        width: 500,\n        height: 500\n      }\n    }).then(res => {\n      // console.log(\"response\", res);\n      this.stream = res;\n      this.status = 'My camera is being accessed';\n      this.btnLabel = 'Take a Pic';\n      if (!this.camIsShowing) {\n        this.camIsShowing = true;\n      }\n    }).catch(err => {\n      // console.log(err);\n      if (err?.message === 'Permission denied') {\n        this.status = 'Permission denied please try again by approving webcam access';\n      } else {\n        this.status = 'You may not have a webcam connected to your system. Please try again....';\n      }\n    });\n  }\n  captureImage() {\n    console.log(\"cat palace\");\n    this.isFlash = true;\n    setTimeout(() => {\n      console.log(\"dawg castle\");\n      this.isFlash = false;\n    }, 200);\n    this.trigger.next();\n    if (this.formInitialized == true) {\n      this.formInitialized = false;\n    }\n  }\n  sumbit() {\n    console.log(this.previewImage);\n  }\n  cameraOff() {\n    this.imageBoxVisible = false;\n    this.toggleReopenCam();\n  }\n  reopenCam() {\n    this.imageBoxVisible = true;\n    this.camIsShowing = true;\n    this.toggleReopenCam();\n  }\n};\nFormpageComponent = __decorate([Component({\n  selector: 'app-formpage',\n  templateUrl: './formpage.component.html',\n  styleUrls: ['./formpage.component.css']\n})], FormpageComponent);\nexport { FormpageComponent };","map":{"version":3,"mappings":"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","names":["Component","Subject","NgScrollbarModule","AppModule","imports","FormpageComponent","constructor","$trigger","trigger","asObservable","snapshot","event","previewImage","imageAsDataUrl","imageFromEvent","savedImages","push","toggleReopenCam","reopenCameraBtn","removeImage","image","indexOfImage","indexOf","splice","getPermission","navigator","mediaDevices","getUserMedia","video","width","height","then","res","stream","status","btnLabel","camIsShowing","catch","err","message","captureImage","console","log","isFlash","setTimeout","next","formInitialized","sumbit","cameraOff","imageBoxVisible","reopenCam","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\OliviaMurphy\\Documents\\TeamAPP\\i5-field-status\\src\\app\\formpage\\formpage.component.ts"],"sourcesContent":["import { Component, NgModule } from '@angular/core';\r\nimport { WebcamImage } from 'ngx-webcam/public_api';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { NgScrollbarModule } from 'ngx-scrollbar';\r\n\r\n@NgModule({\r\n  imports: [\r\n    NgScrollbarModule\r\n  ],\r\n  \r\n})\r\nexport class AppModule { }\r\n\r\n@Component({\r\n  selector: 'app-formpage',\r\n  templateUrl: './formpage.component.html',\r\n  styleUrls: ['./formpage.component.css']\r\n})\r\nexport class FormpageComponent {\r\n  stream:any = null;\r\n  trigger: Subject<void> = new Subject();\r\n  // savedTriggers:Subject<void>[] = [];\r\n  previewImage: string = '';\r\n  savedImages:string[] = [];  \r\n  btnLabel: string = 'Take a Pic' \r\n  status!: string;\r\n  camIsShowing:boolean=false;\r\n  camIsStreaming: boolean=false;\r\n  displayCamera: boolean= false;\r\n  displayDescription: boolean= false;\r\n  formContainer: boolean= false;\r\n  imageBox: boolean=true;\r\n  imageBoxVisible: boolean =true;\r\n  formInitialized: boolean=true;\r\n  reopenCameraBtn: boolean=false;\r\n  isFlash: boolean=false;\r\n  \r\n\r\nget $trigger(): Observable<void> {\r\n    return this.trigger.asObservable(); \r\n}\r\n\r\nsnapshot(event: WebcamImage) {\r\n  // console.log(event); \r\n  this.previewImage = event.imageAsDataUrl;\r\n\r\n\r\n  //save in array\r\n  const imageFromEvent = event.imageAsDataUrl;\r\n  this.savedImages.push(imageFromEvent);\r\n}\r\n\r\ntoggleReopenCam() {\r\n  this.reopenCameraBtn=!this.reopenCameraBtn;\r\n}\r\n  // create function that reads the src\r\n  // compares it to the l i s that\r\n  // removes it if there\r\n\r\n  removeImage(image:string) {\r\n    const indexOfImage = this.savedImages.indexOf(image);\r\n\r\n    if(indexOfImage != -1) {\r\n      this.savedImages.splice(indexOfImage,1);\r\n    }\r\n  }\r\n\r\n  getPermission() {\r\n    navigator.mediaDevices.getUserMedia({\r\n      video:{\r\n        width: 500,\r\n        height: 500\r\n      }\r\n    }).then((res) => {\r\n      // console.log(\"response\", res);\r\n      this.stream = res;\r\n      this.status = 'My camera is being accessed';\r\n      this.btnLabel = 'Take a Pic';\r\n      if (!this.camIsShowing) {\r\n        this.camIsShowing=true;\r\n      }\r\n    }).catch(err =>{\r\n      // console.log(err);\r\n      if(err?.message === 'Permission denied') {\r\n        this.status = 'Permission denied please try again by approving webcam access';\r\n      } else {\r\n          this.status = 'You may not have a webcam connected to your system. Please try again....';\r\n        }\r\n    })\r\n  }\r\n\r\n  captureImage(){\r\n    console.log(\"cat palace\")\r\n\r\n    this.isFlash=true;\r\n\r\n    setTimeout(() => {\r\n      console.log(\"dawg castle\");\r\n      this.isFlash=false;\r\n\r\n    }, 200);\r\n    \r\n\r\n     this.trigger.next();   \r\n     if (this.formInitialized==true){\r\n      this.formInitialized=false;\r\n     }\r\n  }\r\n\r\nsumbit(){\r\n  console.log(this.previewImage);\r\n}\r\n\r\ncameraOff() {\r\n  this.imageBoxVisible=false;\r\n  this.toggleReopenCam();\r\n}\r\n\r\nreopenCam() {\r\n    this.imageBoxVisible=true;\r\n      this.camIsShowing= true;\r\n    this.toggleReopenCam();\r\n}\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}